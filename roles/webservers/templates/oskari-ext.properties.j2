
# set development to false or comment it out to load using minified javascript
# (requires minified version of the javascript to be compiled and servlet init-param to set the version to load)
development={{ oskari_development }}
oskari.client.version=dist/{{ oskari_version }}

# set to true to get database populated with initial demo content
oskari.init.db=false

# Logger implementation - SystemLogger logs into System.out/err, replace with logging implementation of your choice
oskari.logger=fi.nls.oskari.log.SystemLogger

# true all ssl certs/hosts for debugging! configure certs on the server for production
oskari.trustAllCerts=true
# true all ssl certs/hosts for debugging! configure certs on the server for production
oskari.trustAllHosts=true

# path for incoming calls to access map
oskari.map.url=/

# servlet domain
oskari.domain=http://localhost:8082/oskari-map

# url path to call for ajax requests/action routes
oskari.ajax.url.prefix=/?

# Used to configure a template view for publishing maps
view.template.publish=2

view.default.Guest=1
view.default.Admin=1
view.default.User=1
view.default.roles=Admin, User, Guest
oskari.user.role.admin=Admin

# UserService implementation - create own implementation to integrate into actual systems and provide feedback for missing interface methods.
#oskari.user.service=fi.nls.oskari.user.StandaloneUserService // Not needed anymore when using JAAS

# Disable, so that user management is handled by JAAS
oskari.request.handlePrincipal=false

# Administrator role - special handling for action routes (deleting map layers and such)
oskari.user.role.admin = Admin

# Configuring search channel implementations for search services.
# Properties are prefixed with 'search.channel.[CHANNEL ID].':
#   className indicates the implementation class
#   other properties are passed on to the implementation class.

# OpenStreetMap search channel settings
search.channel.OPENSTREETMAP_CHANNEL.className=fi.nls.oskari.search.OpenStreetMapSearchChannel
search.channel.OPENSTREETMAP_CHANNEL.service.url=http://nominatim.openstreetmap.org/search

# comma-separated list of search channel ids that should be registered for search service
search.channels=OPENSTREETMAP_CHANNEL

# comma-separated list of id for search channel that will be used (defaulted to) if none are explicitly configured
search.channels.default=OPENSTREETMAP_CHANNEL

# comma-separated list of search channel ids used by GetSearchResult
actionhandler.GetSearchResult.channels=OPENSTREETMAP_CHANNEL


search.channel.METADATA_CATALOGUE_CHANNEL.className=fi.nls.oskari.search.channel.MetadataCatalogueChannelSearchService
search.channel.METADATA_CATALOGUE_CHANNEL.image.url.fi=http://localhost/geonetwork/srv/fi/resources.get.uuid?access=public&
search.channel.METADATA_CATALOGUE_CHANNEL.image.url.sv=http://localhost/geonetwork/srv/sv/resources.get.uuid?access=public&
search.channel.METADATA_CATALOGUE_CHANNEL.image.url.en=http://localhost/geonetwork/srv/en/resources.get.uuid?access=public&
search.channel.METADATA_CATALOGUE_CHANNEL.fetchpage.url.fi=http://www.paikkatietohakemisto.fi/catalogue/ui/metadata.html?lang=fi&metadataresourceuuid=
search.channel.METADATA_CATALOGUE_CHANNEL.fetchpage.url.sv=http://www.paikkatietohakemisto.fi/catalogue/ui/metadata.html?lang=sv&metadataresourceuuid=
search.channel.METADATA_CATALOGUE_CHANNEL.fetchpage.url.en=http://www.paikkatietohakemisto.fi/catalogue/ui/metadata.html?lang=en&metadataresourceuuid=

# Metadata catalogue channel config
search.channel.METADATA_CATALOGUE_CHANNEL.metadata.catalogue.server=http://localhost
search.channel.METADATA_CATALOGUE_CHANNEL.metadata.catalogue.path=/geonetwork/srv/en/csw
search.channel.METADATA_CATALOGUE_CHANNEL.metadata.catalogue.queryParams=SERVICE=CSW&VERSION=2.0.2&request=GetDomain&PropertyName=
# List of fields to show in advanced form (values retrieved by GetDomain requests)
search.channel.METADATA_CATALOGUE_CHANNEL.fields=type,serviceType,Title,OrganisationName,Subject,TopicCategory,Language,ResourceLanguage
# isMulti means user can select multiple values ie. checkbox vs. dropdown
search.channel.METADATA_CATALOGUE_CHANNEL.field.type.isMulti=true
# this means that if type has value 'service' add to the same filter operation any serviceType parameters as single AND-operation
search.channel.METADATA_CATALOGUE_CHANNEL.field.type.dependencies=service|serviceType
# filter is the property to be used on filter operations
search.channel.METADATA_CATALOGUE_CHANNEL.field.type.filter=gmd:hierarchyLevel
search.channel.METADATA_CATALOGUE_CHANNEL.field.serviceType.isMulti=true
search.channel.METADATA_CATALOGUE_CHANNEL.field.serviceType.filter=srv:serviceType
# shownIf is sent to client meaning this field is only shown if field 'type' has value 'service' selected, closely related to field.dependencies!
search.channel.METADATA_CATALOGUE_CHANNEL.field.serviceType.shownIf=[{"type":"service"}]
search.channel.METADATA_CATALOGUE_CHANNEL.field.Title.filter=gmd:title
search.channel.METADATA_CATALOGUE_CHANNEL.field.TopicCategory.filter=gmd:topicCategory
# fields without filterOp are treated as LIKE operations, filterOp param value is mapped in code to deegree operations
search.channel.METADATA_CATALOGUE_CHANNEL.field.Subject.filterOp=COMP_EQUAL
search.channel.METADATA_CATALOGUE_CHANNEL.field.serviceType.filterOp=COMP_EQUAL
# must match means that this will be a top level filter element added as AND-operations (where as most other fields are added as OR)
search.channel.METADATA_CATALOGUE_CHANNEL.field.Language.mustMatch=true
search.channel.METADATA_CATALOGUE_CHANNEL.field.ResourceLanguage.mustMatch=true

# How many threads are created into a wfs executor thread pool, defaults to 5
#wfsexecutorservice.threadcount=15

# bundles that are added on runtime to view if user has one of configured role
actionhandler.GetAppSetup.dynamic.bundles = admin-layerselector, admin-layerrights

# Linking dynamic bundles based on user roles
# Properties are named 'actionhandler.GetAppSetup.dynamic.[BUNDLE ID].roles'
#   with value as comma-separated list of role names that should be served the bundle
actionhandler.GetAppSetup.dynamic.bundle.admin-layerrights.roles = Admin
actionhandler.GetAppSetup.dynamic.bundle.admin-layerselector.roles = Admin

# redis
redis.hostname=localhost
redis.port=6379
redis.pool.size=10

##############################
# proxy services
##############################
oskari.proxyservices = print, wfsquery, myplacestile

oskari.proxy.print.url=http://localhost:8250/portti-map-imaging-0.0.1-SNAPSHOT/imaging/service/thumbnail/extent.jsonp
oskari.proxy.print.params=zoomLevel,coord,mapLayers,showMarker,forceCache,noSavedState,pageSize
oskari.proxy.print.header.Content-Type=application/json; charset=UTF-8

oskari.proxy.wfsquery.handler=fi.nls.oskari.service.WFSQueryProxyHandler
oskari.proxy.wfsquery.header.Content-Type=text/xml

oskari.proxy.myplacestile.url=http://localhost:8888/geoserver/wms?CQL_FILTER=
oskari.proxy.myplacestile.handler=fi.nls.oskari.proxy.MyPlacesProxyHandler
oskari.proxy.myplacestile.user=admin
oskari.proxy.myplacestile.pass=geoserver

# My places query url
# MyPlacesBundleHandler.java, GeoServerProxyService.java
myplaces.ows.url=http://localhost:8888/geoserver/oskari/ows?
# MapFullHandler.java, MyPlacesHandler.java
myplaces.wms.url=http://localhost:8888/geoserver/oskari/wms?buffer=128&tiled=yes&tilesorigin=0,0&CQL_FILTER=
myplaces.user=admin
myplaces.password=geoserver
# Base WFS layer id for myplaces (portti_maplayer and portti_wfs_layer tables)
# Find correct id layer later on when my_places wfs layer is inserted
myplaces.baselayer.id=1
# My places namespace
myplaces.xmlns=http://www.oskari.org
# My places namespace prefix
myplaces.xmlns.prefix=oskari

# Supported locales, comma separated and default first
oskari.locales={{ oskari_locales }}